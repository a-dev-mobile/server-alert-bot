package alertmanager

import (
	"encoding/json"
	"github.com/a-dev-mobile/server-alert-bot/internal/config"
	"github.com/a-dev-mobile/server-alert-bot/internal/models"
	"golang.org/x/exp/slog"
	"io"
	"net/http"
	"strings"
)

// FetchAlerts –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–∑ AlertManager
func FetchAlerts(cfg *config.Config, lg *slog.Logger) models.AlertData {
	var alertData models.AlertData

	resp, err := http.Get(cfg.AlertManagerURL)
	if err != nil {
		lg.Error("Failed to fetch alerts", "error", err)
		return alertData
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		lg.Error("AlertManager returned non-OK status", "status", resp.Status)
		return alertData
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		lg.Error("Error reading response body:", err)
		return alertData
	}

	if err := json.Unmarshal(body, &alertData); err != nil {
		lg.Error("Error decoding response JSON:", err)
		return alertData
	}

	return alertData
}

// replaceUnsupportedChars –∑–∞–º–µ–Ω—è–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ
func replaceUnsupportedChars(input string) string {
	replacements := map[string]string{
		"-":  "‚Äì", // –ó–∞–º–µ–Ω–∞ –¥–µ—Ñ–∏—Å–∞ –Ω–∞ —Ç–∏—Ä–µ
		"*":  "‚Ä¢", // –ó–∞–º–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ –ø—É–ª–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∏–º–≤–æ–ª
		"_":  "‚Äó", // –ó–∞–º–µ–Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–≤–æ–π–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
		"[":  "‚ü¶", // –ó–∞–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å–∫–æ–±–∫—É
		"]":  "‚üß", // –ó–∞–º–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å–∫–æ–±–∫—É
		"(":  "‚ù®", // –ó–∞–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π –∫—Ä—É–≥–ª–æ–π —Å–∫–æ–±–∫–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å–∫–æ–±–∫—É
		")":  "‚ù©", // –ó–∞–º–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫—Ä—É–≥–ª–æ–π —Å–∫–æ–±–∫–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å–∫–æ–±–∫—É
		"~":  "Àú", // –ó–∞–º–µ–Ω–∞ —Ç–∏–ª—å–¥—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª
		"\\": "‚ßµ", // –ó–∞–º–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π –∫–æ—Å–æ–π —á–µ—Ä—Ç—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª
	}
	for oldChar, newChar := range replacements {
		input = strings.ReplaceAll(input, oldChar, newChar)
	}
	return input
}

// FormatAlertMessage —Å–æ–∑–¥–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
func FormatAlertMessage(alert models.Alert) string {
	var sb strings.Builder
	sb.WriteString("üö® *Alert!* üö®\n\n")
	sb.WriteString("*Summary:* " + replaceUnsupportedChars(alert.Annotations.Summary) + "\n")
	sb.WriteString("\n")
	sb.WriteString("*Instance:* " + replaceUnsupportedChars(alert.Labels.Instance) + "\n")
	sb.WriteString("*Job:* " + replaceUnsupportedChars(alert.Labels.Job) + "\n")
	sb.WriteString("*Severity:* " + alert.Labels.Severity + "\n")
	sb.WriteString("*State:* " + alert.State + "\n")
	sb.WriteString("*Active Since:* " + alert.ActiveAt + "\n")
	return sb.String()
}
